.kudo_message_cont{:id => "kudo_message_id_#{kudo.id}"}
 - if kudo.author
  = link_to kudo_author_picture(kudo), user_profile_path(kudo.author), :id => kudo.id
 - else
  = anon_picture
 .kudo_message_bubble_cont{"data-id" => kudo.id, "data-scope" => kudo.share_scope }
  .kudo_message_bubble_nipple
  .kudo_message_text_cont
   .kudo_side_controls
    - unless kudo_object(kudo).has_been_improperly_flagged?
     .kudo_flag_cont.kf_dimmed.clickable{"data-id" => kudo.id }

    %div= sent_kudo_destroy_link(kudo)
    
   %p.sender_recipients
    - unless kudo.author.blank?
     %span.sender= link_to kudo.author.to_s, user_profile_path(kudo.author),  :id => kudo.id
    - else
     (removed account)
    %span.greater_than &gt;
    %span.receiver
     = recipients_profiles kudo.recipients_names_ids
    
   %p.sharescope_date
    %span.category= "[#{kudo.category}]"
    %span.share_scope
     = "Shared with #{shared_with kudo.share_scope}"
    %span.kudo_date
     = kudo.created_at.to_s(:short)
   .social_buttons
    %div{:id => "google_plus_#{kudo.id}", :class => "plusone_button"}
    %div{:id => "facebook_like_#{kudo.id}", :class => "facebook_like"}
    
   %p.kudo_body_text= kudo.body

   .popup_placeholder{:id => "flag_popup_placeholder_#{kudo.id}"}

   .clearing
   .kudo_comment
    - unless kudo.comments_disabled?
     = link_to t(:kudo_add_comment), '#', :class   => "comment_form_toggle",
                                                        :id     => kudo.id,
                                                        :remote => true
   
   .clearing

   = render :partial => "comments/comment", :locals => {:kudo => kudo}
   // render :partial => "kudos/business_card", :locals => {:kudo => kudo_object(kudo) }
   
  
 .clearing
