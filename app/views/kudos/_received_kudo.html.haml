.kudo_message_cont{:id => "kudo_message_id_#{kudo.kudo.id}"}
 .avatar_cont
  - if kudo.author
   = link_to profile_picture_for(kudo.author), user_profile_path(kudo.author), :id => kudo_object(kudo).id
  - else
   = anon_picture
  .sender= link_to kudo.author.to_s, user_profile_path(kudo.author),:id => kudo_object(kudo) if kudo.author
  
 .kudo_message_bubble_cont{"data-id" => kudo.id, "data-scope" => kudo.share_scope }
  .kudo_message_bubble_nipple
  .kudo_message_text_cont
   .kudo_side_controls
    - unless kudo_object(kudo).has_been_improperly_flagged?
     .kudo_flag_cont.kf_dimmed.clickable{"data-id" => kudo.kudo.id }
    %div= link_to('', user_kudo_path(current_user, kudo), :method => :delete, :confirm => I18n.t(:are_you_sure), :class => "delete_kudo_btn")
   
   
   %p.recipients_cont{:id => "kudo_#{kudo.id}"}
   
    %span.greater_than &gt;&gt;

    %span.receiver
     - if kudo.recipient
      = link_to kudo.recipient.to_s, user_profile_path(kudo.recipient)
     - else
      "unknown recipient(s)"
    
   %p.sharescope_date
    %span.category= "[#{kudo.category}]"
    %span.share_scope
     = "Shared with #{shared_with kudo.share_scope}"
    %span.kudo_date
     = kudo.created_at.to_s(:short)
   .social_buttons
    %div{:id => "google_plus_#{kudo.id}", :class => "plusone_button"}
    %div{:id => "facebook_like_#{kudo.id}", :class => "facebook_like"}
    
   %p.kudo_body_text= kudo.body

   

   .popup_placeholder{:id => "flag_popup_placeholder_#{kudo.kudo.id}"}
   .clearing
   .kudo_comment
    - unless kudo.kudo.comments_disabled?
     = link_to t(:kudo_add_comment), 'javascript:void(0)', :class  => "comment_form_toggle",
                                                :id     => kudo_object(kudo).id,
                                                :remote => true
    &nbsp;
    = "(#{kudo.comments_count})" if kudo.comments_count > 0
   
   .clearing
    
   = render :partial => "comments/comment",    :locals => {:kudo => kudo_object(kudo) }
   // render :partial => "kudos/business_card", :locals => {:kudo => kudo_object(kudo) }
   
 .clearing
